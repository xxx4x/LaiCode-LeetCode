package BasicClass.Class12.Assignments;

import java.util.Arrays;
import java.util.Random;

/*
Quick Sort(10)
Given an array of integers, sort the elements in the array in ascending order. The quick sort algorithm should be used to solve this problem.
Examples

- {1} is sorted to {1}
- {1, 2, 3} is sorted to {1, 2, 3}
- {3, 2, 1} is sorted to {1, 2, 3}
- {4, 2, -3, 6, 1} is sorted to {-3, 1, 2, 4, 6}

Corner Cases
- What if the given array is null? In this case, we do not need to do anything.
- What if the given array is of length zero? In this case, we do not need to do anything.

[[388,-304,304,-350,26,366,190,85,468,-321,159,-29,269,360,454,-214,496,-472,77,82,197,-104,495,-192,148,266,432,209,149,
-314,61,-153,400,-38,372,144,267,-241,153,294,443,176,395,-498,170,-494,7,315,295,-110,1,224,11,-314,275,-199,126,-311,
334,412,214,-216,128,-91,388,208,329,-188,324,375,111,147,22,131,23,-449,22,377,227,208,86,240,292,-65,498,345,311,14,
315,299,435,414,476,196,440,-327,226,-212,108,21,335,19,191,308,13,-249,273,-107,370,-151,223,-33,97,290,435,-319,382,
-438,268,65,333,458,65,-43,405,279,236,75,492,-409,231,-78,499,-65,293,413,251,323,97,21,163,-116,349,-270,72,-170,57,
286,53,-289,56,78,467,56,405,483,311,-371,43,-368,248,-61,76,414,442,110,189,-49,38,-77,92,-66,280,-355,443,-29,372,253,
5,-467,244,-219,237,191,426,-154,224,-447,177,-183,234,-245,457,-265,261,376,205,-177,234,395,214,376,40,169,173,-141,210,
433,195,318,50,15,336,-456,46,306,231,25,237,-496,118,379,216,320,17,-147,163,136,363,452,212,-419,352,462,81,91,140,
432,213,326,433,176,209,227,283,-8,56,100,211,71,86,363,467,57,241,483,428,-212,55,197,265,-481,302,337,75,374,13,427,
226,312,2,-230,139,-359,202,-79,167,6,450,273,142,-180,448,4,482,287,342,-252,77,-451,370,208,397,-4,168,365,499,429,
202,53,239,-392,358,483,135,-296,23,-299,379,288,432,61,500,-193,272,-436,184,-64,394,284,149,-194,91,192,377,-141,184,
369,306,21,139,30,400,-53,170,-272,233,311,146,-126,418,-467,250,-19,344,-161,129,99,313,298,298,496,170,286,265,12,68,
-119,265,436,432,-168,101,-110,115,92,431,-497,85,381,351,-455,319,-139,358,-154,320,-163,203,-500,415,324,296,-165,163,
416,142,105,318,-305,345,-336,392,290,453,173,372,-190,364,-18,158,74,174,-28,211,489,190,11,294,-85,394,-347,50,118,403,
-128,440,219,437,447,329,86,462,46,218,279,65,211,262,-23,169,210,337,315,483,157,490,-339,67,-113,109,-288,53,-154,128,
-324,473,-387,13,464,224,-221,144,-450,478,-406,33,90,357,165,127,-47,396,46,146,-439,185,-301,126,-177,229,-314,464,
-22,338,435,365,-129,378,65,133,54,447,84,265,91,422,-276,240,-362,473,314,331,186,446,353,101,-175,45,-107,89,51,486,
433,424,404,200,-246,372,-304,326,58,450,-322,57,306,393,274,456,-116,345,-86,72,-414,158,85,190,439,186,-54,144,78,403,
-274,500,220,46,-292,488,275,362,-247,291,305,302,-296,283,326,295,-471,467,434,400,-307,250,350,333,130,225,-244,447,106,
452,234,323,462,188,-294,141,-35,184,18,484,-12,82,-273,130,323,12,187,293,-301,286,-225,68,497,88,446,170,233,237,-166,226,
-395,31,-169,142,284,254,-122,153,192,257,217,284,-312,18,15,12,-52,311,-438,379,-154,30,-270,324,-203,319,475,343,362,
11,479,3,-121,362,-69,114,52,343,54,162,181,153,226,290,-288,250,450,324,-145,64,486,459,298,66,172,265,475,125,334,284,
393,46,214,376,-230,295,-468,12,138,321,135,23,-420,396,-319,217,-12,190,-31,36,83,234,322,215,-46,107,-91,64,-469,56,5,
203,236,307,-28,160,49,129,170,301,358,177,113,114,230,324,-85,307,244,75,486,116,-423,252,-10,100,-162,429,-194,27,40,
78,-415,239,189,98,35,112,185,308,-235,447,140,58,-175,224,-257,447,-386,287,5,150,452,70,-416,36,436,448,-108,212,173,
300,361,240,-423,225,-439,62,231,280,364,256,-278,342,-42,419,-42,54,339,430,-268,450,-172,485,-320,106,299,123,360,222,
39,8,387,175,-406,473,425,94,-470,301,374,478,-238,319,279,357,6,305,304,353,-74,198,-350,370,-209,404,409,423,-241,442,
188,371,476,331,-220,45,290,9,300,394,260,128,-44,390,66,349,104,20,123,257,263,171,436,174,-414,232,234,52,-380,118,-9,
193,293,328,230,378,-237,464,408,425,136,436,264,440,92,290,240,403,146,322,-26,338,-398,243,407,134,262,293,-251,75,
-393,230,405,369,473,124,-42,369,207,347,-480,314,-85,69,21,214,-293,395,-448,68,-268,143,473,291,455,492,-187,188,-194,
467,417,438,-209,399,440,393,-327,126,2,16,73,286,276,82,207,75,-163,133,-16,338,-162,418,-83,305,463,319,-418,165,151,
391,-77,35,297,356,-210,152,463,379,-44,405,-314,113,296,494,105,367,-50,192,-40,335,56,272,28,84,80,250,-363,487,-129,
83,-226,476,298,476,168,356,-266,321,-93,28,-270,226,-130,254,-93,373,175,85,493,257,-53,283,-57,91,-88,459,-224,346,
-276,254,95,30,470,210,260,431,-484,464,-167,76,-323,133,221,166,-247,176,420,212,-396,99,-124,484,273,268,-250,281,165,
25,-168,312,-95,127,-86,251,299,378,-303,285,-226,14,198,89,-217,228,196,351,-76,226,458,500,-84,18,370,357,200,29,107,
398,-387,306,-302,273,-500,442,135,92,-325,389,210,376,-189,90,-99,322,248,343,-64,322,-340,455,-365,375,-254,113,262,
153,-110,4,-137,163,-244,439,44,436,-112,267,211,250,-303,13,-469,334,-327,77,301,439,244,400,461,31,486,330,-316,188,
-196,365,-108,90,-231,203,24,193,-460,382,-393,398,-317,431,-1,155,-266,235,177,31,-432,356,-396,345,492,225,2,450,-32,
83,-164,203,78,134,-65,96,139,204,-48,344,374,238,295,69,169,183,-235,480,259,241,369,351]]
 */
public class Ex3 {
    public static void main (String[] args){
        int[] array1 = new int[]{1};
        int[] array2 = new int[]{1,2,3};
        int[] array3 = new int[]{3,2,1};
        int[] array4 = new int[]{4,2,-3,6,1};
        int[] array5 = new int[]{388,-304,304,-350,26,366,190,85,468,-321,159,-29,269,360,454,-214,496,-472,77,82,197,-104,495,-192,148,266,432,209,149,
                -314,61,-153,400,-38,372,144,267,-241,153,294,443,176,395,-498,170,-494,7,315,295,-110,1,224,11,-314,275,-199,126,-311,
                334,412,214,-216,128,-91,388,208,329,-188,324,375,111,147,22,131,23,-449,22,377,227,208,86,240,292,-65,498,345,311,14,
                315,299,435,414,476,196,440,-327,226,-212,108,21,335,19,191,308,13,-249,273,-107,370,-151,223,-33,97,290,435,-319,382,
                -438,268,65,333,458,65,-43,405,279,236,75,492,-409,231,-78,499,-65,293,413,251,323,97,21,163,-116,349,-270,72,-170,57,
                286,53,-289,56,78,467,56,405,483,311,-371,43,-368,248,-61,76,414,442,110,189,-49,38,-77,92,-66,280,-355,443,-29,372,253,
                5,-467,244,-219,237,191,426,-154,224,-447,177,-183,234,-245,457,-265,261,376,205,-177,234,395,214,376,40,169,173,-141,210,
                433,195,318,50,15,336,-456,46,306,231,25,237,-496,118,379,216,320,17,-147,163,136,363,452,212,-419,352,462,81,91,140,
                432,213,326,433,176,209,227,283,-8,56,100,211,71,86,363,467,57,241,483,428,-212,55,197,265,-481,302,337,75,374,13,427,
                226,312,2,-230,139,-359,202,-79,167,6,450,273,142,-180,448,4,482,287,342,-252,77,-451,370,208,397,-4,168,365,499,429,
                202,53,239,-392,358,483,135,-296,23,-299,379,288,432,61,500,-193,272,-436,184,-64,394,284,149,-194,91,192,377,-141,184,
                369,306,21,139,30,400,-53,170,-272,233,311,146,-126,418,-467,250,-19,344,-161,129,99,313,298,298,496,170,286,265,12,68,
                -119,265,436,432,-168,101,-110,115,92,431,-497,85,381,351,-455,319,-139,358,-154,320,-163,203,-500,415,324,296,-165,163,
                416,142,105,318,-305,345,-336,392,290,453,173,372,-190,364,-18,158,74,174,-28,211,489,190,11,294,-85,394,-347,50,118,403,
                -128,440,219,437,447,329,86,462,46,218,279,65,211,262,-23,169,210,337,315,483,157,490,-339,67,-113,109,-288,53,-154,128,
                -324,473,-387,13,464,224,-221,144,-450,478,-406,33,90,357,165,127,-47,396,46,146,-439,185,-301,126,-177,229,-314,464,
                -22,338,435,365,-129,378,65,133,54,447,84,265,91,422,-276,240,-362,473,314,331,186,446,353,101,-175,45,-107,89,51,486,
                433,424,404,200,-246,372,-304,326,58,450,-322,57,306,393,274,456,-116,345,-86,72,-414,158,85,190,439,186,-54,144,78,403,
                -274,500,220,46,-292,488,275,362,-247,291,305,302,-296,283,326,295,-471,467,434,400,-307,250,350,333,130,225,-244,447,106,
                452,234,323,462,188,-294,141,-35,184,18,484,-12,82,-273,130,323,12,187,293,-301,286,-225,68,497,88,446,170,233,237,-166,226,
                -395,31,-169,142,284,254,-122,153,192,257,217,284,-312,18,15,12,-52,311,-438,379,-154,30,-270,324,-203,319,475,343,362,
                11,479,3,-121,362,-69,114,52,343,54,162,181,153,226,290,-288,250,450,324,-145,64,486,459,298,66,172,265,475,125,334,284,
                393,46,214,376,-230,295,-468,12,138,321,135,23,-420,396,-319,217,-12,190,-31,36,83,234,322,215,-46,107,-91,64,-469,56,5,
                203,236,307,-28,160,49,129,170,301,358,177,113,114,230,324,-85,307,244,75,486,116,-423,252,-10,100,-162,429,-194,27,40,
                78,-415,239,189,98,35,112,185,308,-235,447,140,58,-175,224,-257,447,-386,287,5,150,452,70,-416,36,436,448,-108,212,173,
                300,361,240,-423,225,-439,62,231,280,364,256,-278,342,-42,419,-42,54,339,430,-268,450,-172,485,-320,106,299,123,360,222,
                39,8,387,175,-406,473,425,94,-470,301,374,478,-238,319,279,357,6,305,304,353,-74,198,-350,370,-209,404,409,423,-241,442,
                188,371,476,331,-220,45,290,9,300,394,260,128,-44,390,66,349,104,20,123,257,263,171,436,174,-414,232,234,52,-380,118,-9,
                193,293,328,230,378,-237,464,408,425,136,436,264,440,92,290,240,403,146,322,-26,338,-398,243,407,134,262,293,-251,75,
                -393,230,405,369,473,124,-42,369,207,347,-480,314,-85,69,21,214,-293,395,-448,68,-268,143,473,291,455,492,-187,188,-194,
                467,417,438,-209,399,440,393,-327,126,2,16,73,286,276,82,207,75,-163,133,-16,338,-162,418,-83,305,463,319,-418,165,151,
                391,-77,35,297,356,-210,152,463,379,-44,405,-314,113,296,494,105,367,-50,192,-40,335,56,272,28,84,80,250,-363,487,-129,
                83,-226,476,298,476,168,356,-266,321,-93,28,-270,226,-130,254,-93,373,175,85,493,257,-53,283,-57,91,-88,459,-224,346,
                -276,254,95,30,470,210,260,431,-484,464,-167,76,-323,133,221,166,-247,176,420,212,-396,99,-124,484,273,268,-250,281,165,
                25,-168,312,-95,127,-86,251,299,378,-303,285,-226,14,198,89,-217,228,196,351,-76,226,458,500,-84,18,370,357,200,29,107,
                398,-387,306,-302,273,-500,442,135,92,-325,389,210,376,-189,90,-99,322,248,343,-64,322,-340,455,-365,375,-254,113,262,
                153,-110,4,-137,163,-244,439,44,436,-112,267,211,250,-303,13,-469,334,-327,77,301,439,244,400,461,31,486,330,-316,188,
                -196,365,-108,90,-231,203,24,193,-460,382,-393,398,-317,431,-1,155,-266,235,177,31,-432,356,-396,345,492,225,2,450,-32,
                83,-164,203,78,134,-65,96,139,204,-48,344,374,238,295,69,169,183,-235,480,259,241,369,351};
        Ex3 qs = new Ex3();
        qs.quickSort(array1);
        System.out.println(Arrays.toString(array1));

        qs.quickSort(array2);
        System.out.println(Arrays.toString(array2));

        qs.quickSort(array3);
        System.out.println(Arrays.toString(array3));

        qs.quickSort(array4);
        System.out.println(Arrays.toString(array4));

        qs.quickSort(array5);
        System.out.println(Arrays.toString(array5));


    }
    public int[] quickSort(int[] array){
        // 参考答案
        // check null first.
        if (array == null) {
            return array;
        }
        quickSort(array,0,array.length-1);
        return array;
    }

    public void quickSort(int[] array, int left, int right){
        if (left >= right){
            return;
        }
        // define a pivot and use the pivot to partition the array;
        int pivotPos = partition(array, left, right);
        // pivot is already at its position, when we do the recursive call on
        // the two partitions, pivot should not be included in any of them.
        quickSort(array, left, pivotPos -1);
        quickSort(array, pivotPos + 1, right);
    }

    private int partition(int[] array, int left, int right){
        int pivotIndex = pivotIndex(left,right);
        int pivot = array[pivotIndex];
        // swap the pivot element to the rightmost position first
        swap(array, pivotIndex, right);
        int leftBound = left;
        int rightBound = right -1;
        while (leftBound <= rightBound){
            if (array[leftBound] < pivot){
                leftBound++;
            } else if (array[rightBound] >= pivot){
                rightBound--;
            } else {
                swap(array, leftBound++, rightBound--);
            }
        }
        // swap back the pivot element.
        swap(array, leftBound, right);
        return leftBound;
    }

    // this is one of the ways defining the pivot.
    // pick random element in the range  of [left, right].
    private int pivotIndex(int left, int right){
        return left+(int)(Math.random()*(right-left+1));
    }

    private void swap(int[] array, int left, int right){
        int temp = array[left];
        array[left] = array[right];
        array[right] = temp;
    }
    /*

    private Random random = new Random();
    public void quickSort(int[] array){
        if (array==null || array.length==0){
            return;
        }
        quickSort(array,0,array.length-1);

    }

    private void quickSort(int[] array, int left, int right){
        if (left >= right){
            return;
        }

        int pivotIndex = left + random.nextInt(right -left +1);
        swap(array, pivotIndex, right);
        int i = left;
        int j = right - 1;
        while(i <= j){
            if (array[i] >= array[right]){
                swap(array,i,j);
                j--;
            } else{
                i++;
            }
        }
        swap(array,i,right);
        quickSort(array,left,i-1);
        quickSort(array,i+1,right);
    }

    public void swap(int[] array, int x, int y){
        int tmp = array[x];
        array[x] = array[y];
        array[y] = tmp;
    }

     */
}
